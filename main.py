import openai

from db_class import *
from asyncio import to_thread
from random import choice
from webhook import webhook_pooling
from aiogram import Bot, Dispatcher, types

OWNER_ID: int = 1689863728
ADMIN_LIST: list = [OWNER_ID]

d = DB('asset.sqlite3')

bot = Bot(token_tg)
Bot.set_current(bot)  # in some cases you might get exception that your current bot instance is not defined so this will solve your problem
dp = Dispatcher(bot)

openai.api_key = token_op

# region Admin
# @dp.message_handler(lambda message: message.from_user.id in ADMIN_ID, commands=['start'])
# async def admin_start(message: types.Message):
# endregion
# region User

@dp.message_handler(commands=['start', 'help'])
async def start_handler(message: types.Message):
    if message.get_command() == 'start':
        await message.answer_sticker(sticker_s['Hi'])
    await bot.send_message(
        message.from_user.id,
        """
–ü—Ä–∏–≤–µ—Ç —è <strong>ChatGPT_3.5</strong>
–Ø –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω @simeonlimon, –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å

–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <strong>/nc (–Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞)</strong>

–í—ã–±–µ—Ä–µ—Ç–µ —á–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <strong>/s</strong>

–£–¥–∞–ª–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <strong>/d</strong>

–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <strong>/a</strong>

–ß—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <strong>/c</strong>

–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –≤–≤–µ–¥–∏—Ç–µ <strong>/r (–Ω–æ–≤–æ–µ –∏–º—è)</strong>

–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ChatGPT 3.5 –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π
–∑–∞–ø—Ä–æ—Å –±–æ—Ç—É –Ω–∞–ø—Ä–∏–º–µ—Ä '–†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–æ—Å–º–æ—Å–µ'
        """,
        parse_mode='HTML'
    )
    if not d.user_exists(message):
        d.add_user(message)


@dp.message_handler(commands=['t', 'mt', 'tokens', 'token', 'm_t', 'max_tokens'])
async def max_tokens(message: types.Message):
    d.edit_max_token(message)
    await message.answer(f'max –∫–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {message.get_args()}')


@dp.message_handler(commands=['desc', 'cd', 'chat_description', 'c_d', 'chatdescripion'])
async def bot_description(message: types.Message):
    d.system_message_update(message)
    await message.answer(f'–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {message.get_args() if message.get_args() != "" else "You are a smart, helpful, kind, nice, good and very friendly assistant."}')


@dp.message_handler(commands=['a', 'active', 'ac', 'activechat', 'a_c', 'active_chat'])
async def active_chat(message: types.Message):
    active_chat_name = d.active_chat_name(message)
    print(f'{slash}–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç - {active_chat_name}{sla_d}')
    await message.answer(f'–í–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç: {active_chat_name}')


@dp.message_handler(commands=['new_chat', 'n_c', 'nc', 'newchat'])
async def new_chat(message: types.Message):
    args = message.get_args()
    d.add_chat(message)
    await message.answer(f'–°–æ–∑–¥–∞–Ω —á–∞—Ç: {args}')


@dp.message_handler(commands=['r', 'rc', 'r_c', 'rename_chat', 'renamechat', 'rename'])
async def rename_chat(message: types.Message):
    args = message.get_args()
    active_chat_id = d.active_chat_id(message)
    active_chat_name = d.active_chat_name(message)
    d.edit_chat_name(message, active_chat_id)
    await message.answer(f'–ß–∞—Ç {active_chat_name} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ {args}')


@dp.message_handler(commands=['c', 'clear', 'cc', 'c_c', 'clearchat', 'clear_chat'])
async def clear_chat(message: types.Message):
    active_chat_id = d.active_chat_id(message)
    active_chat_name = d.active_chat_name(message)
    print(f'{slash}–ß–∞—Ç {active_chat_name} –æ—á–∏—â–µ–Ω, {message.from_user.username}{sla_d}')
    d.clear_chat(active_chat_id)
    await message.answer(f'–ß–∞—Ç {active_chat_name} –æ—á–∏—â–µ–Ω')


@dp.message_handler(commands=['delete_chat', 'del_chat', 'd_c', 'deletechat', 'delchat', 'dc', 'delete', 'del', 'd'])
async def del_chat(message: types.Message):
    active_chat_id = d.active_chat_id(message)
    active_chat_name = d.active_chat_name(message)
    d.clear_chat(active_chat_id)
    d.del_chat(active_chat_id)
    d.set_chat_active_after_del(message)
    print(f'{slash}–ß–∞—Ç {active_chat_name} –±—ã–ª —É–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username}{sla_d}')
    await message.answer(f'–ß–∞—Ç {active_chat_name} –±—ã–ª —É–¥–∞–ª–µ–Ω')


@dp.message_handler(commands=['select_chat', 's_c', 'sc', 'selectchat', 'select', 's'])
async def choose_chat(message: types.Message):
    chat_list_id = d.chat_list_id(message)
    chat_list_name = d.chat_list_name(message)
    kb = inlinekeyboard(chat_list_name, chat_list_id)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:', reply_markup=kb)


@dp.message_handler(commands=['chat_history', 'history', 'c_h', 'ch', 'h'])
async def choose_chat(message: types.Message):
    active_chat_id = d.active_chat_id(message)
    msg = await message.answer('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ üîÑ')
    content = await to_thread(openai.ChatCompletion.create,
                              model="gpt-3.5-turbo",
                              messages=d.message_data(chat_id=active_chat_id, message=message) + [{'role': 'user', 'content': 'What we was talking about? Please answer me on russian language, your answer need to be short'}],
                              max_tokens=None
                              )
    print(f'{slash}–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ üîÑ –¥–ª—è {message.from_user.username}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {sla_d}')
    await msg.delete()
    d.token_used(message, content)
    await message.reply(content['choices'][0]['message']['content'])


@dp.message_handler(content_types='text')
async def message(message: types.Message):
    active_chat_id = d.active_chat_id(message)
    d.add_message(active_chat_id, message=message)
    msg = await message.answer('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ üîÑ')
    print(f'{slash}–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ üîÑ –¥–ª—è {message.from_user.username}{sla_d}')
    content = await to_thread(openai.ChatCompletion.create,
                              model="gpt-3.5-turbo",
                              messages=d.message_data(chat_id=active_chat_id, message=message),
                              max_tokens=d.max_token(message)
                              )
    d.add_message(active_chat_id, content)
    await msg.delete()
    d.token_used(message, content)
    await message.reply(content['choices'][0]['message']['content'])


@dp.message_handler(content_types=["sticker"])
async def send_sticker(message: Message):
    await message.answer_sticker(message.sticker.file_id)
    await message.answer(message.sticker.file_id)
    print(message.content_type)

# endregion
# region Other

@dp.message_handler(
    content_types=[
        'audio',
        'contact',
        'document',
        'game',
        'invoice',
        'location',
        'photo',
        'poll',
        'sticker',
        'text',
        'venue',
        'video',
        'video_note',
        'voice'
    ]
)
async def else_(message: Message):
    print(f'{slash}–û—à–∏–±–∫–∞{sla_d}')
    await message.answer(choice(phrases))
    await message.answer_sticker(sticker_s['Error'])
    print(message.content_type)

# endregion
# region Callback

@dp.callback_query_handler(lambda callback_query: int(callback_query.data) in d.chat_list_id(id=callback_query.from_user.id))
async def callback_handler(callback_query: types.CallbackQuery):
    d.change_active_chat(callback_query)
    await callback_query.message.edit_text(f'–í—ã–±—Ä–∞–Ω —á–∞—Ç: {d.chat_name_from_id(callback_query.data)}')

# endregion


if __name__ == "__main__":
    webhook_pooling(dp, token_tg, 8080, ADMIN_LIST)
